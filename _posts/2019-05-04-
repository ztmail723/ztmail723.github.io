---
layout: post
title:  判断是否为完全二叉树
date:   2019-05-04 15:00:00 +0800
categories: 技术文档
tag: 算法 树
---

* content
{:toc}


什么是完全二叉树
-------------------------------------
一颗非空高度为k(k>=0)的满二叉树，是有2^(k-1)-1个结点的二叉树。   
一颗包含n个结点高度为k的二叉树T，当按层次顺序编号T的所有结点，对应于一棵高度为k的满二叉树中编号由1至n的那些结点时，T被称为完全二叉树(complete binary)。

{% highlight c++%}
#include<iostream>
#include<queue>
using namespace std;
struct Tree
{
    int value;
    Tree *left;
    Tree *right;
};
bool judge(Tree *root)
{
    static queue<Tree*> q;
    Tree* p;
    q.push(root);
    bool flag=false;
    while(!q.empty())
    {
        p=q.front;//队首指针
        if(p==NULL)
        {
            flag=true;
        }
        else if(flag==true)//如果结束标记打开，又发现了不为空的结点
        {
            return false;
        }
        else
        {
            q.push(p->left);
            q.push(p->right);//让左右结点入队
        }
        q.pop;
    }
    return true;
}
{% endhighlight%}
